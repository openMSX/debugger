name: Build workflow

on:
  workflow_call:
    outputs:
      target_debian:
        description: "Debian output directory name"
        value: ${{ jobs.build.outputs.debian_target }}
      target_mingw:
        description: "MinGW output directory name"
        value: ${{ jobs.build.outputs.mingw_target }}
      prerelease:
        description: "Whether a prerelease artifact will be generated"
        value: ${{ jobs.build.outputs.prerelease }}
      draft:
        description: "Whether a draft artifact will be generated"
        value: ${{ jobs.build.outputs.draft }}
      name:
        description: "Name of this release"
        value: ${{ jobs.build.outputs.name }}

env:
  package_origin: -github

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      debian_target: ${{ steps.get-version.outputs.debian_target }}
      mingw_target: ${{ steps.get-version.outputs.mingw_target }}
      prerelease: ${{ steps.get-version.outputs.prerelease }}
      draft: ${{ steps.get-version.outputs.draft }}
      name: ${{ steps.get-version.outputs.name }}
    container:
      image: ${{ matrix.image }}
      options: --user=0:0
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: docker://pvmm/mingw-arch:latest
            name: Windows
            cpu: x86_64
            os: mingw
          - image: debian:unstable
            name: GNU/Linux
            cpu: x86_64
            os: debian
    steps:
    - name: Configure base system
      run: |
        if [ "${{ matrix.os }}" = "debian" ]; then
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          apt-get -y update
          apt-get -y install tzdata
          echo "America/Sao_Paulo" > /etc/timezone
          cp /etc/timezone /tz
          cp /etc/localtime /tz
          apt-get -y install git build-essential python3 qtbase5-dev qt5-qmake
        fi
        git config --global init.defaultBranch master
    - name: Checkout repository code
      uses: actions/checkout@v3
    - name: Compile repository code
      run: |
        if [ "${{ matrix.os }}" = "mingw" ]; then
          # Setting QT_INSTALL_BINS differently won't work since it's overwritten.
          #export QT_INSTALL_BINS=/usr/x86_64-w64-mingw32/lib/qt/bin/
          export OPENMSX_TARGET_OS=mingw32
          export CXX=/usr/bin/x86_64-w64-mingw32-g++
          export WINDRES=/usr/bin/x86_64-w64-mingw32-windres
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/uic /usr/x86_64-w64-mingw32/bin/uic
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/moc /usr/x86_64-w64-mingw32/bin/moc
          ln -sf /usr/x86_64-w64-mingw32/lib/qt/bin/rcc /usr/x86_64-w64-mingw32/bin/rcc
          QMAKE=/usr/x86_64-w64-mingw32/lib/qt/bin/qmake make
        else
          make
        fi
    - name: Determine release version and target directory name
      id: get-version
      run: |
        #VERSION=`python3 build/version.py`
        if [ '${{ github.event_name }}' = 'pull request' ]; then
          name='pr-${{ github.ref_name }}'
          draft='true'
          prerelease='false'
        else
          name=${{ github.ref_name }}
          if echo "${{ github.ref_name }}" | grep -Eq 'rc[0-9]?$'; then
            draft='true'
            prerelease='true'
          elif echo "${{ github.ref_name }}" | grep -Eq '^v[0-9]'; then
              draft='false'
              prerelease='false'
          else
              draft='true'
              prerelease='false'
          fi
        fi
        echo "draft=$draft" >> $GITHUB_OUTPUT
        echo "draft=$draft"
        echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        echo "prerelease=$prerelease"
        echo "name=$name" >> $GITHUB_OUTPUT
        echo "name=$name"
        echo "target=debugger-${{ matrix.cpu }}-${{ matrix.os }}${{ env.package_origin }}" >> $GITHUB_OUTPUT
        echo "target=$target"
    - name: Prepare redistributable directory
      run: |
        cd derived/bin
        if [ "${{ matrix.os }}" = "mingw" ]; then
          /usr/bin/x86_64-w64-mingw32-strip openmsx-debugger.exe
          find /usr/x86_64-w64-mingw32 -name 'libbrotlicommon.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libbrotlidec.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libbz2-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libfreetype-6.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libglib-2.0-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libgraphite2.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libharfbuzz-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libiconv-2.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libintl-8.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpcre-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpcre2-16-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libpng16-16.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libssp-0.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'libwinpthread-1.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Core.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Gui.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Network.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'Qt5Widgets.dll' -exec cp {} . \;
          find /usr/x86_64-w64-mingw32 -name 'zlib1.dll' -exec cp {} . \;
          mkdir platforms
          cp -rp /usr/x86_64-w64-mingw32/lib/qt/plugins/platforms/qwindows.dll platforms/
        fi
    - name: Upload redistributable package for ${{ matrix.name }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-version.outputs.target }}
        path: |
          derived/bin
